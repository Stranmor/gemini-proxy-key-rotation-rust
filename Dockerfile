# =================================================================================================
# Dockerfile для Rust-проекта с надежным кэшированием зависимостей
# =================================================================================================
# Используем конкретную версию Alpine для стабильности, воспроизводимости и меньшего размера.
ARG RUST_VERSION=latest
ARG APP_NAME=gemini-proxy-key-rotation-rust

# -------------------------------------------------------------------------------------------------
# Этап 0: Сборщик зависимостей (Dependencies Builder)
# Цель: Скомпилировать зависимости отдельно, чтобы кэшировать их.
# Этот слой будет пересобираться только при изменении Cargo.toml или Cargo.lock.
# -------------------------------------------------------------------------------------------------
FROM rust:${RUST_VERSION} AS dependencies_builder
WORKDIR /app

# Создаем фиктивный проект. Это более надежно, чем `cargo init`.
RUN mkdir src
RUN echo "fn main() {}" > src/main.rs

# Копируем только файлы зависимостей.
COPY Cargo.toml Cargo.lock ./

# Собираем только зависимости.
# Флаг --locked обеспечивает воспроизводимость сборки.
RUN cargo build --release --locked

# -------------------------------------------------------------------------------------------------
# Этап 1: Сборщик приложения (Builder)
# Цель: Собрать финальный бинарник, используя кэшированные зависимости.
# -------------------------------------------------------------------------------------------------
FROM rust:${RUST_VERSION} AS builder
WORKDIR /app

# Копируем кэш реестра крейтов и уже скомпилированные зависимости из предыдущего этапа.
COPY --from=dependencies_builder /usr/local/cargo/registry /usr/local/cargo/registry
COPY --from=dependencies_builder /app/target /app/target

# Копируем исходный код. Этот слой будет инвалидироваться при каждом изменении кода.
COPY . .

# Собираем приложение. Это будет очень быстро, так как все зависимости уже готовы.
RUN cargo build --release --locked

# -------------------------------------------------------------------------------------------------
# Этап 2: Финальный образ (Final)
# Цель: Создать минимальный и безопасный образ для запуска.
# -------------------------------------------------------------------------------------------------
FROM alpine:latest AS final
WORKDIR /app

# Устанавливаем curl для HEALTHCHECK.
RUN apk --no-cache add curl

# Копируем только скомпилированный бинарник из этапа 'builder'.
COPY --from=builder /app/target/release/${APP_NAME} .

# Копируем необходимые статические файлы и конфигурацию.
COPY static ./static
COPY config.example.yaml .

# Открываем порт, на котором будет работать приложение.
EXPOSE 8080

# Добавляем проверку состояния, чтобы Docker мог отслеживать работоспособность.
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Команда для запуска приложения.
CMD ["./gemini-proxy-key-rotation-rust"]

# -------------------------------------------------------------------------------------------------
# Этап 3: Линтер (Linter)
# Используется для запуска clippy в CI/CD или локально.
# Наследуется от 'builder', так как там уже есть все зависимости и исходный код.
# -------------------------------------------------------------------------------------------------
FROM builder AS linter
WORKDIR /app
RUN rustup component add clippy
CMD ["cargo", "clippy", "--all-targets", "--all-features", "--", "-D", "warnings"]

# -------------------------------------------------------------------------------------------------
# Этап 4: Тестер (Tester)
# Используется для запуска тестов в CI/CD.
# -------------------------------------------------------------------------------------------------
FROM builder AS tester
WORKDIR /app
CMD ["cargo", "test", "--all-features", "--locked"]

# -------------------------------------------------------------------------------------------------
# Этап 5: Генератор отчета о покрытии (Coverage Runner)
# Используется для генерации отчета о покрытии кода тестами.
# -------------------------------------------------------------------------------------------------
FROM builder AS coverage_runner
WORKDIR /app

# Устанавливаем необходимые системные зависимости для tarpaulin с движком LLVM.
RUN apt-get update && apt-get install -y llvm-dev libffi-dev clang

# llvm-tools-preview - это компонент rustup, который предоставляет инструменты LLVM.
RUN rustup component add llvm-tools-preview

# Устанавливаем tarpaulin. Фиксируем найденную рабочую версию для воспроизводимости.
RUN cargo install cargo-tarpaulin --version 0.32.8 --locked

# Создаем директорию для отчета.
RUN mkdir -p /app/coverage_report

# Команда для запуска tarpaulin. Будет выполнена через `docker-compose run`.
CMD ["cargo", "tarpaulin", "--verbose", "--all-features", "--engine", "Llvm", "--out", "Lcov", "--out", "Html", "--output-dir", "/app/coverage_report", "--no-dead-code"]