# Multi-stage Dockerfile for Gemini Proxy - Optimized for fast builds
ARG RUST_VERSION=1.83
ARG APP_NAME=gemini-proxy

# Stage 1: Base image with system dependencies
FROM rust:${RUST_VERSION}-slim AS base
WORKDIR /app

# Install system dependencies once
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Stage 2: Dependencies cache
FROM base AS dependencies
ARG APP_NAME=gemini-proxy

# Create dummy project for dependency caching
RUN mkdir -p src && echo "fn main() {}" > src/main.rs
COPY Cargo.toml Cargo.lock ./

# Build only dependencies
RUN cargo build --release && rm src/*.rs target/release/deps/${APP_NAME}*

# Stage 3: Application builder
FROM base AS builder
ARG APP_NAME=gemini-proxy

# Copy cached dependencies
COPY --from=dependencies /app/target target
COPY --from=dependencies /usr/local/cargo /usr/local/cargo

# Copy source code
COPY . .

# Build application
RUN cargo build --release

# Stage 4: Runtime image
FROM debian:bookworm-slim AS runtime
WORKDIR /app

ARG APP_NAME=gemini-proxy

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -r appuser && useradd -r -g appuser appuser

# Copy binary and static files
COPY --from=builder /app/target/release/${APP_NAME} /app/${APP_NAME}
COPY --from=builder /app/static /app/static
COPY --from=builder /app/config.example.yaml /app/config.example.yaml

# Create cache directory
RUN mkdir -p /app/runtime-cache && chown -R appuser:appuser /app

USER appuser

# Environment variables
ENV PORT=4806
ENV XDG_CACHE_HOME=/app/runtime-cache
ENV HF_HOME=/app/runtime-cache/HF_CACHE
ENV HUGGINGFACE_HUB_CACHE=/app/runtime-cache/HF_CACHE

EXPOSE 4806

CMD ["/app/gemini-proxy"]