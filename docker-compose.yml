version: '3.8'

services:
  gemini-proxy:
    # Build the image using the Dockerfile in the current directory
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gemini-proxy-openai-compose
    # Use an env_file to load environment variables (API keys, port, etc.)
    # Users should copy .env.example to .env and fill in their secrets
    # env_file directive removed, using explicit environment variables below
    # Ensure values are set in the .env file
    # Expose ports. Reads SERVER_PORT from .env, defaults to 8080 if not set.
    ports:
      - "${SERVER_PORT_HOST:-8082}:${SERVER_PORT_CONTAINER:-8080}" # Maps host port (default 8082) to container port (default 8080)
    volumes:
      # Use a named volume for key state persistence to avoid host filesystem issues.
      - key_state_data:/app # Mount the volume to the app directory
      # Optional: Mount config.yaml if you still need some settings from it that are NOT overridden by env vars.
      # Generally, prefer env vars for Docker deployments when using compose + .env
      # - ./config.yaml:/app/config.yaml # Mount config.yaml if needed for specific group target_urls or server settings
    environment:
      # Values are substituted from the .env file or host environment
      # Server settings
      SERVER_PORT: ${SERVER_PORT_CONTAINER:-8080} # Port inside the container
      RUST_LOG: ${RUST_LOG:-info}
      # Explicitly pass default group vars for testing
      GEMINI_PROXY_GROUP_DEFAULT_API_KEYS: "${GEMINI_PROXY_GROUP_DEFAULT_API_KEYS:-}"

      # --- Group Configurations ---
      # Group configurations (API keys, proxy, target URLs) are loaded automatically
      # from environment variables defined in the .env file following the pattern
      # GEMINI_PROXY_GROUP_<NAME>_API_KEYS, GEMINI_PROXY_GROUP_<NAME>_PROXY_URL, etc.
    restart: unless-stopped
    # Optional: Add healthcheck based on the /health endpoint
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SERVER_PORT_CONTAINER:-8080}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s # Give the container time to start

volumes:
  # Define the volume for key state persistence
  key_state_data:

# Note: Ensure you have a .env file based on .env.example with your actual API keys.