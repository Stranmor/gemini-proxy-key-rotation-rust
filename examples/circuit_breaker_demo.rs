// examples/circuit_breaker_demo.rs
// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã circuit breaker

use gemini_proxy_key_rotation_rust::circuit_breaker::{CircuitBreaker, CircuitBreakerConfig, CircuitBreakerError};
use std::sync::Arc;
use std::time::Duration;
use tokio::time::sleep;

#[tokio::main]
async fn main() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tracing_subscriber::fmt::init();

    // –°–æ–∑–¥–∞–Ω–∏–µ circuit breaker —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –¥–µ–º–æ
    let config = CircuitBreakerConfig {
        failure_threshold: 3,
        recovery_timeout: Duration::from_secs(2),
        success_threshold: 2,
    };
    
    let cb = Arc::new(CircuitBreaker::new("demo-service".to_string(), config));
    
    println!("üîß Circuit Breaker Demo");
    println!("üìä Config: 3 failures ‚Üí open, 2s recovery, 2 successes ‚Üí close\n");

    // –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    println!("‚úÖ Phase 1: Normal operation");
    for i in 1..=3 {
        let result = cb.call(|| async {
            println!("  üì§ Request {i} - Success");
            Ok::<(), &str>(())
        }).await;
        
        match result {
            Ok(_) => println!("  ‚úÖ Request {i} completed successfully"),
            Err(e) => println!("  ‚ùå Request {i} failed: {:?}", e),
        }
    }
    
    println!("\nüî• Phase 2: Simulating failures");
    // –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è —Ä–∞–∑–º—ã–∫–∞–Ω–∏—è circuit breaker
    for i in 1..=4 {
        let result = cb.call(|| async {
            println!("  üì§ Request {i} - Simulating failure");
            Err::<(), &str>("Service unavailable")
        }).await;
        
        match result {
            Ok(_) => println!("  ‚úÖ Request {i} completed successfully"),
            Err(CircuitBreakerError::CircuitOpen) => {
                println!("  üö´ Request {i} - Circuit breaker is OPEN (failing fast)");
            }
            Err(CircuitBreakerError::OperationFailed(_)) => {
                println!("  ‚ùå Request {i} - Operation failed");
            }
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        let state = cb.get_state().await;
        println!("  üìä Circuit state: {:?}", state);
        
        sleep(Duration::from_millis(100)).await;
    }
    
    println!("\n‚è≥ Phase 3: Waiting for recovery timeout...");
    sleep(Duration::from_secs(3)).await;
    
    println!("üîÑ Phase 4: Testing recovery (half-open state)");
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ half-open
    let result = cb.call(|| async {
        println!("  üì§ Recovery test request - Success");
        Ok::<(), &str>(())
    }).await;
    
    match result {
        Ok(_) => {
            println!("  ‚úÖ Recovery test successful");
            println!("  üìä Circuit state: {:?}", cb.get_state().await);
        }
        Err(e) => println!("  ‚ùå Recovery test failed: {:?}", e),
    }
    
    // –ï—â–µ –æ–¥–∏–Ω —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∑–∞–∫—Ä—ã—Ç—å circuit
    let result = cb.call(|| async {
        println!("  üì§ Second recovery request - Success");
        Ok::<(), &str>(())
    }).await;
    
    match result {
        Ok(_) => {
            println!("  ‚úÖ Second recovery test successful");
            println!("  üìä Circuit state: {:?}", cb.get_state().await);
        }
        Err(e) => println!("  ‚ùå Second recovery test failed: {:?}", e),
    }
    
    println!("\nüìà Final statistics:");
    let stats = cb.get_stats();
    println!("  Total requests: {}", stats.total_requests);
    println!("  Total failures: {}", stats.total_failures);
    println!("  Success rate: {:.1}%", 
        (stats.total_requests - stats.total_failures) as f64 / stats.total_requests as f64 * 100.0);
    
    println!("\nüéâ Demo completed!");
}