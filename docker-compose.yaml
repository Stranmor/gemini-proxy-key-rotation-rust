services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      network: host
    dns:
      - 8.8.8.8
      - 8.8.4.4
    container_name: gemini-proxy-container
    ports:
      - "${GEMINI_PROXY_PORT:-8080}:${GEMINI_PROXY_PORT:-8080}"
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - key_states:/app/data
    environment:
      - RUST_BACKTRACE=1
    restart: unless-stopped
    depends_on:
      - redis
    # Ограничения ресурсов для non-swarm режима
    deploy:
      resources:
        limits:
          cpus: '2.0'

  redis:
    image: "docker.io/library/redis:alpine"
    container_name: gemini-proxy-redis
    ports:
      - "6380:6379"
    restart: unless-stopped

  # Сервис для запуска генерации отчета о покрытии.
  # Не запускается по умолчанию, а вызывается через `docker-compose run`.
  coverage_runner:
    build:
      context: .
      # Указываем, что нужно использовать этап 'coverage_runner' из Dockerfile.
      target: coverage_runner
      network: host
    dns:
      - 8.8.8.8
      - 8.8.4.4
    volumes:
      # Привязываем локальную директорию к директории с отчетом внутри контейнера.
      # Это позволит получить доступ к сгенерированному отчету на хост-машине.
      - ./coverage_report:/app/coverage_report

  # Сервис для запуска тестов.
  # Вызывается через `docker-compose run`.
  test:
    build:
      context: .
      target: tester
    # `depends_on` ensures that redis is started before the tests run.
    # Podman Compose will also connect this service to the default network of the project,
    # allowing the test container to reach redis at `redis:6379`.
    depends_on:
      - redis

volumes:
  key_states: